<?> 无限制通配符
<? extends E> extends 关键字声明了类型的上界，表示参数化的类型可能是所指定的类型，或者是此类型的子类
<? super E> super 关键字声明了类型的下界，表示参数化的类型可能是指定的类型，或者是此类型的父类

// 使用原则《Effictive Java》
// 为了获得最大限度的灵活性，要在表示 生产者或者消费者 的输入参数上使用通配符，
//使用的规则就是：生产者有上限、消费者有下限
1. 如果参数化类型表示一个 T 的生产者，使用 < ? extends T >
2. 如果它表示一个 T 的消费者，就使用 < ? super T >
3. 如果既是生产又是消费，那使用通配符就没什么意义了，因为你需要的是精确的参数类型

著作权归https://www.pdai.tech所有。
链接：https://www.pdai.tech/md/java/basic/java-basic-x-generic.html

Java泛型这个特性是从JDK 1.5才开始加入的，因此为了兼容之前的版本，Java泛型的实现采取了“伪泛型”的策略，即Java在语法上支持泛型，但是在编译阶段会进行所谓的“类型擦除”（Type Erasure），将所有的泛型表示（尖括号中的内容）都替换为具体的类型（其对应的原生态类型），就像完全没有泛型一样。
泛型的类型擦除原则是：
1.消除类型参数声明，即删除 <> 及其包围的部分
2.根据类型参数的上下界推断并替换所有的类型参数为原生态类型：
    如果类型参数是无限制通配符或没有上下界限定，则替换为Object；
    如果存在上下界限定，则根据子类替换原则取类型参数的最左边限定类型（即父类）。
3.为了保证类型安全，必要时插入强制类型转换代码。
4.自动产生‘桥接方法’以保证擦除类型后的代码仍然具有泛型的“多态性”。