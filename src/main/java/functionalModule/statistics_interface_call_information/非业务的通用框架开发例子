项目背景
我们希望设计开发一个小的框架，能够获取接口调用的各种统计信息，
比如，响应时间的最大值（max）、最小值（min）、平均值（avg）、百分位值（percentile）、接口调用次数（count）、频率（tps） 等，
并且支持将统计结果以各种显示格式（比如：JSON 格式、网页格式、自定义显示格式等）输出到各种终端（Console 命令行、HTTP 网页、Email、日志文件、自定义输出终端等），以方便查看。
我们假设这是真实项目中的一个开发需求，如果让你来负责开发这样一个通用的框架，应用到各种业务系统中，支持实时计算、查看数据的统计信息。

需求分析
1. 功能性需求分析
接口统计信息：包括接口响应时间的统计信息，以及接口调用次数的统计信息等。
统计信息的类型：max、min、avg、percentile、count、tps 等。
统计信息显示格式：Json、Html、自定义显示格式。
统计信息显示终端：Console、Email、HTTP 网页、日志、自定义显示终端。

隐藏需求：
--统计触发方式：包括主动和被动两种。
主动表示以一定的频率定时统计数据，并主动推送到显示终端，比如邮件推送。
被动表示用户触发统计，比如用户在网页中选择要统计的时间区间，触发统计，并将结果显示给用户。
--统计时间区间：框架需要支持自定义统计时间区间，
比如统计最近 10 分钟的某接口的 tps、访问次数，或者统计 12 月 11 日 00 点到 12 月 12 日 00 点之间某接口响应时间的最大值、最小值、平均值等。
--统计时间间隔：对于主动触发统计，我们还要支持指定统计时间间隔，也就是多久触发一次统计显示。
比如，每间隔 10s 统计一次接口信息并显示到命令行中，每间隔 24 小时发送一封统计信息邮件。

2.非功能性需求分析
易用性；性能；扩展性；容错性；通用性


框架设计
使用TDD（测试驱动开发）和 Prototype（最小原型）的思想。
先聚焦于一个简单的应用场景，基于此设计实现一个简单的原型。
尽管这个最小原型系统在功能和非功能特性上都不完善，但它能够看得见、摸得着，比较具体、不抽象，能够很有效地帮助我缕清更复杂的设计思路，是迭代设计的基础。

对于性能计数器这个框架的开发来说，我们可以先聚焦于一个非常具体、简单的应用场景，
比如统计用户注册、登录这两个接口的响应时间的最大值和平均值、接口调用次数，并且将统计结果以 JSON 的格式输出到命令行中。
现在这个需求简单、具体、明确，设计实现起来难度降低了很多。

-->优化：用springAop制成无侵入式

我们把整个框架分为四个模块：数据采集、存储、聚合统计、显示。
每个模块负责的工作简单罗列如下。
数据采集：负责打点采集原始数据，包括记录每次接口请求的响应时间和请求时间。数据采集过程要高度容错，不能影响到接口本身的可用性。除此之外，因为这部分功能是暴露给框架的使用者的，所以在设计数据采集 API 的时候，我们也要尽量考虑其易用性。
存储：负责将采集的原始数据保存下来，以便后面做聚合统计。数据的存储方式有多种，比如：Redis、MySQL、HBase、日志、文件、内存等。数据存储比较耗时，为了尽量地减少对接口性能（比如响应时间）的影响，采集和存储的过程异步完成。
聚合统计：负责将原始数据聚合为统计数据，比如：max、min、avg、pencentile、count、tps 等。为了支持更多的聚合统计规则，代码希望尽可能灵活、可扩展。
显示：负责将统计数据以某种格式显示到终端，比如：输出到命令行、邮件、网页、自定义显示终端等

1. 划分职责进而识别出有哪些类
--MetricsCollector 类负责提供 API，来采集接口请求的原始数据。
我们可以为 MetricsCollector 抽象出一个接口，但这并不是必须的，因为暂时我们只能想到一个 MetricsCollector 的实现方式。
--MetricsStorage 接口负责原始数据存储，RedisMetricsStorage 类实现 MetricsStorage 接口。
这样做是为了今后灵活地扩展新的存储方法，比如用 HBase 来存储。
--Aggregator 类负责根据原始数据计算统计数据。
--ConsoleReporter 类、EmailReporter 类分别负责以一定频率统计并发送统计数据到命令行和邮件。
至于 ConsoleReporter 和 EmailReporter 是否可以抽象出可复用的抽象类，或者抽象出一个公共的接口，我们暂时还不能确定。
2. 定义类及类与类之间的关系
接下来就是定义类及属性和方法，定义类与类之间的关系。
大致地识别出几个核心的类之后，我的习惯性做法是，先在 IDE 中创建好这几个类，然后开始试着定义它们的属性和方法。
在设计类、类与类之间交互的时候，不断地用之前学过的设计原则和思想来审视设计是否合理

把统计显示所要完成的功能逻辑细分一下的话，主要包含下面 4 点：
1.根据给定的时间区间，从数据库中拉取数据；
2.根据原始数据，计算得到统计数据；
3.将统计数据显示到终端（命令行或邮件）；
4.定时触发以上 3 个过程的执行。