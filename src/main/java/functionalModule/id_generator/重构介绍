重构实例

ID 生成器

背景介绍：
假设你正在参与一个后端业务系统的开发，为了方便在请求出错时排查问题，我们在编写代码的时候会在关键路径上打印日志。
某个请求出错之后，我们希望能搜索出这个请求对应的所有日志，以此来查找问题的原因。
而实际情况是，在日志文件中，不同请求的日志会交织在一起。如果没有东西来标识哪些日志属于同一个请求，我们就无法关联同一个请求的所有日志。

实现思路：
借鉴微服务调用链追踪的实现思路，给每个请求分配一个唯一ID，并且保存在请求的上下文（Context）中，比如，处理请求的工作线程的局部变量中
在 Java 语言中，我们可以将 ID 存储在 Servlet 线程的 ThreadLocal 中，或者利用 Slf4j 日志框架的 MDC（Mapped Diagnostic Contexts）来实现（实际上底层原理也是基于线程的 ThreadLocal）
每次打印日志的时候，我们从请求上下文中取出请求 ID，跟日志一块输出。这样，同一个请求的所有日志都包含同样的请求 ID 信息，我们就可以通过请求 ID 来搜索同一个请求的所有日志了。


重构思路

第一轮重构：提高代码的可读性
1.hostName变量不应该被重复使用，尤其当这两次使用时的含义还不同的时候；
2.将获取hostName的代码抽离出来，定义为getLastfieldOfHostName()函数；
3.删除代码中的魔法数，比如，57、90、97、122；
4.将随机数生成的代码抽离出来，定义为 generateRandomAlphameric() 函数；
5.generate() 函数中的三个 if 逻辑重复了，且实现过于复杂，我们要对其进行简化；
6.对 IdGenerator 类重命名，并且抽象出对应的接口

第二轮重构：提高代码的可测试性
1.generate() 函数定义为静态函数，会影响使用该函数的代码的可测试性；
2.generate() 函数的代码实现依赖运行环境（本机名）、时间函数、随机函数，所以 generate() 函数本身的可测试性也不好。
改动：
1.从 getLastfieldOfHostName() 函数中，将逻辑比较复杂的那部分代码剥离出来，定义为 getLastSubstrSplittedByDot() 函数。
因为 getLastfieldOfHostName() 函数依赖本地主机名，所以，剥离出主要代码之后这个函数变得非常简单，可以不用测试。
我们重点测试 getLastSubstrSplittedByDot() 函数即可。
2.将 generateRandomAlphameric() 和 getLastSubstrSplittedByDot() 这两个函数的访问权限设置为 protected。
这样做的目的是，可以直接在单元测试中通过对象来调用两个函数进行测试。
3.给 generateRandomAlphameric() 和 getLastSubstrSplittedByDot() 两个函数添加 Google Guava 的 annotation @VisibleForTesting。
这个 annotation 没有任何实际的作用，只起到标识的作用，告诉其他人说，这两个函数本该是 private 访问权限的，之所以提升访问权限到 protected，只是为了测试，只能用于单元测试中

第三轮重构：编写完善的单元测试
写单元测试的时候，测试对象是函数定义的功能，而非具体的实现逻辑。

第四轮重构：添加注释

