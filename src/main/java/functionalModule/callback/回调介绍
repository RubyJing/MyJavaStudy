回调的原理解析：
1.原理：
相对于普通的函数调用来说，回调是一种双向调用关系。
A类事先注册某个函数F到B类，A类在调用B类的P函数的时候，B类反过来调用A类注册给它的F函数。
这里的F函数就是“回调函数”。
A调用B，B反过来又调用A，这种调用机制就叫做“回调”。
2.特点
回调跟模板方法一样，也具有复用和扩展的功能。
实际上，回调不仅可以应用在代码设计上，在更高层次的架构设计上也比较常用。
如：第三方支付，将支付结果结果回调给用户。（异步回调）
3.类型
同步回调：函数返回之前执行回调函数。像模板方法
异步回调（延迟回调）：在函数返回之后执行回调函数。像观察者模式
4.应用举例
4-1.JdbcTemplate
Spring 提供了很多 Template 类，比如，JdbcTemplate、RedisTemplate、RestTemplate。
尽管都叫作 xxxTemplate，但它们并非基于模板模式来实现的，而是基于回调来实现的，确切地说应该是同步回调。
而同步回调从应用场景上很像模板模式，所以，在命名上，这些类使用 Template（模板）这个单词作为后缀。

JdbcTemplate 通过回调的机制，将不变的执行流程抽离出来，放到模板方法 execute() 中，将可变的部分设计成回调 StatementCallback，由用户来定制。
query() 函数是对 execute() 函数的二次封装，让接口用起来更加方便。

4-2.setClickListener()
在 Android 应用开发中，给 Button 控件的点击事件注册监听器。
(异步回调：当用户点击按钮的时候，发送点击事件给观察者，并且执行相应的 onClick() 函数）

4-3.addShutdownHook()
JVM 提供了 Runtime.addShutdownHook(Thread hook) 方法，可以注册一个 JVM 关闭的 Hook。
当应用程序关闭的时候，JVM 会自动调用 Hook 代码

有关 Hook 的逻辑都被封装到 ApplicationShutdownHooks 类中了。当应用程序关闭的时候，JVM 会调用这个类的 runHooks() 方法，创建多个线程，并发地执行多个 Hook。
我们在注册完 Hook 之后，并不需要等待 Hook 执行完成，所以，这也算是一种异步回调。
