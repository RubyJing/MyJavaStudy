状态模式（Finite State Machine）
什么是有限状态机？
有限状态机，英文翻译是Finite State Machine，缩写为FSM，简称为状态机。
状态机有3个组成部分：状态（State)、事件（Event)、动作（Action)。
其中，事件也称为转移条件（Transition Condition）。
事件触发状态的转移及动作的执行。不过，动作不是必须的，也可能只转移状态，不执行任何动作。

具体的例子：
简单实现“超级马里奥”游戏
1.在游戏中，马里奥可以变身为多种形态，
比如小马里奥（Small Mario）、超级马里奥（Super Mario）、火焰马里奥（Fire Mario）、斗篷马里奥（Cape Mario）等等
2.在不同的游戏情节下，各个形态会互相转化，并相应的增减积分。
比如，初始形态是小马里奥，吃了蘑菇之后就会变成超级马里奥，并且增加 100 积分。

实际上，马里奥形态的转变就是一个状态机。
其中，马里奥的不同形态就是状态机中的“状态”，游戏情节（比如吃了蘑菇）就是状态机中的“事件”，加减积分就是状态机中的“动作”。
比如，吃蘑菇这个事件，会触发状态的转移：从小马里奥转移到超级马里奥，以及触发动作的执行（增加 100 积分）

状态机实现方式：
1.分支逻辑法（最简单）：
参照状态转移图，将每一个状态转移，原模原样地直译成代码。
这样编写的代码回包含大量的if-else或switch-case分支判断逻辑，甚至是嵌套的分支逻辑判断逻辑。
2.查表法（可读性和可维护性更好）
实际上，除了用状态转移图来表示之外，状态机还可以用二维表来表示：
可以用第一维表示当前状态，第二维表示事件，值表示当前状态经过事件之后，转移到新状态及其执行的动作。
缺点：
果要执行的动作并非这么简单，而是一系列复杂的逻辑操作（比如加减积分、写数据库，还有可能发送消息通知等等），我们就没法用如此简单的二维数组来表示了。
这也就是说，查表法的实现方式有一定局限性。
3.状态模式（解决复杂的逻辑操作）
状态模式通过将事件触发的状态转移和动作执行，拆分到不同的状态类中，来避免分支判断逻辑。

实际上，像游戏这种比较复杂的状态机，包含的状态比较多，推荐使用查表法，而状态模式会引入非常多的状态类，会导致代码比较难维护。
相反，像电商下单，外卖下单这种类型的状态机，它们的状态不多，状态转移也比较简单，但事件触发执行的动作包含的业务逻辑可能比较复杂，更推荐使用状态模式实现。

