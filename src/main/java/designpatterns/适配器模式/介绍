适配器模式（Adapter Pattern)是作为两个不兼容的接口之间的桥梁。
属于结构型模式，它结合了两个独立接口的功能。

意图：
    将一个类的接口转换成客户希望的另外一个接口，适配器模式使得原来由于接口不兼容而不能一起工作的
那些类可以一起工作。

主要解决：
    在软件系统中，常常要将一些“现存的对象”放到新的环境中，而新环境要求的接口是现对象不能满足的

何时使用：
    1.系统需要使用现有的类，而此类的接口不符合系统的需要
    2.想要建立一个可以重复使用的类，用于与一些彼此之间没有太大关联的一些类，包括一些可能在将来引进
的类一起工作，这些源类不一定有一致的接口
    3.通过接口转换，将一个类插入另一个类系中。

如何解决：
    继承或依赖（推荐）

关键代码：适配器继承或依赖已有的对象，实现想要的目标接口

应用实例：
    1.美国电器110V，中国220V，需要一个适配器将110V转化成220V
    2.JAVA JDK1.1 提供了Enumeration接口，而在1.2中提供了Iterator接口，想要使用1.2的JDK，则
要将以前系统的Enumeration接口转化为Iterator接口，这时需要适配器模式
    3.在LINUX上运行WINDOWS程序
    4.JAVA中的jdbc

优点：1.可以让任何两个没有关联的类一起运行
      2.提高了类的复用
      3.增加了类的透明度
      4.灵活性好

缺点：1.过多地使用适配器，会让系统非常零乱，不易整体进行把握。比如，明明看到调用的是A接口，其实内部
被适配成了B接口的实现，一个系统如果太多出现这种情况，无异于一场灾难。因此如果不是很有必要，可以不适用适配器，
而是直接对系统进行重构。
      2.由于JAVA至多继承一个类，所以至多只能适配一个适配器类，而且目标类必须是抽象类

使用场景：
    有动机地修改一个正常运行的系统的接口，这时应该考虑使用适配器模式

注意事项：
    适配器不是在详细设计时添加的，而是解决正在服役的项目的问题。

